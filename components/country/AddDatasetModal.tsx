"use client";
import { useEffect, useMemo, useRef, useState } from "react";
import { X, Search, Upload, Info, Loader2, CheckCircle2, AlertTriangle } from "lucide-react";
import Papa from "papaparse";
import { supabaseBrowser as supabase } from "@/lib/supabase/supabaseBrowser";

const FIELD="w-full border rounded-md px-3 py-2 text-sm outline-none focus:ring-2 ring-[color:var(--gsc-red)]";
const LABEL="block text-xs font-medium text-[color:var(--gsc-gray)] mb-1";
const BTN_PRIMARY="inline-flex items-center gap-2 bg-[color:var(--gsc-red)] text-white rounded-md px-3 py-2 hover:opacity-90 disabled:opacity-50";
const BTN_GHOST="inline-flex items-center gap-2 border rounded-md px-3 py-2 hover:bg-gray-50";
const CARD="rounded-md border hover:border-[color:var(--gsc-blue)] transition-colors cursor-pointer";

export default function AddDatasetModal({open,onClose,countryIso,onCreated}:{open:boolean;onClose:()=>void;countryIso:string;onCreated?:()=>void;}) {
const [title,setTitle]=useState(""),[desc,setDesc]=useState(""),[year,setYear]=useState<number|"">(""),[unit,setUnit]=useState(""),[adminLevel,setAdmin]=useState("ADM0"),[dataType,setData]=useState<"numeric"|"percentage">("numeric"),[datasetType,setType]=useState<"gradient"|"categorical">("gradient"),[srcName,setSrc]=useState(""),[srcUrl,setUrl]=useState(""),[natVal,setNat]=useState(""),[csv,setCsv]=useState<File|null>(null),[chunk,setChunk]=useState(false),[busy,setBusy]=useState(false),[msg,setMsg]=useState<{type:"ok"|"err"|null;text?:string}>({type:null}),[themes,setThemes]=useState<any[]>([]),[theme,setTheme]=useState("All"),[search,setSearch]=useState(""),[inds,setInds]=useState<any[]>([]),[sel,setSel]=useState<any>(null),[levels,setLvls]=useState(["ADM0"]);
useEffect(()=>{if(!open)return;setTitle("");setDesc("");setYear("");setUnit("");setAdmin("ADM0");setData("numeric");setType("gradient");setSrc("");setUrl("");setNat("");setCsv(null);setSel(null);setMsg({type:null});},[open]);
useEffect(()=>{if(!open)return;(async()=>{const[{data:t},{data:i}] = await Promise.all([supabase.from("theme_catalogue").select("name").order("name"),supabase.from("indicator_catalogue").select("id,code,name,theme,data_type").order("name")]);setThemes(t||[]);setInds(i||[]);})();},[open]);
useEffect(()=>{if(!open)return;(async()=>{const{data}=await supabase.from("admin_units").select("level").eq("country_iso",countryIso);if(data&&data.length){const uniq=Array.from(new Set(data.map((r:any)=>`ADM${String(r.level).replace("ADM","")}`))).concat("ADM0").filter((v,i,a)=>a.indexOf(v)==i).sort((a,b)=>Number(a.replace("ADM",""))-Number(b.replace("ADM","")));setLvls(uniq);}else setLvls(["ADM0","ADM1","ADM2","ADM3","ADM4","ADM5"]);})();},[open,countryIso]);
const fInds=useMemo(()=>{const q=search.toLowerCase().trim();return inds.filter(i=>(theme==="All"||i.theme===theme)&&(!q||i.name.toLowerCase().includes(q)||i.code.toLowerCase().includes(q)||(i.theme||"").toLowerCase().includes(q)));},[inds,search,theme]);
const leftDis=busy||!title.trim()||!adminLevel|| (adminLevel==="ADM0"? !natVal.trim()&&!csv:!csv);
const num=(r:string)=>{if(!r)return null;const s=r.trim().replace(/%|,/g,"");const n=Number(s);return isFinite(n)?n:null;};
const handleCreate=async()=>{try{setBusy(true);setMsg({type:null});
const payload={country_iso:countryIso,indicator_id:sel?.id||null,title:title.trim(),description:desc||null,year:year?Number(year):null,unit:unit||null,admin_level:adminLevel,data_type:dataType,dataset_type:datasetType,source_name:srcName||null,source_url:srcUrl||null};
const{data:meta,error:mErr}=await supabase.from("dataset_metadata").insert(payload).select("id").single();if(mErr)throw mErr;const metaId=meta.id;
if(adminLevel==="ADM0"&&!csv){const v=num(natVal);if(v==null)throw new Error("Enter valid national value.");const{error}=await supabase.from("dataset_values").insert({dataset_id:metaId,admin_pcode:"ADM0",value:v,unit:unit||null});if(error)throw error;setBusy(false);setMsg({type:"ok",text:"Dataset saved."});onCreated?.();return;}
if(!csv)throw new Error("Please select CSV.");const text=await csv.text();const parsed=Papa.parse(text,{header:true,skipEmptyLines:true});if(parsed.errors.length)throw new Error(parsed.errors[0].message);
const rows=(parsed.data as any[]).map(r=>({pcode:r.pcode||r.PCode||r.PCODE||"",value:r.value||r.Value||r.VALUE||"",unit:r.unit||"",notes:r.notes||""}));
let ok=0,skip=0,payloadRows:any[]=[];for(const r of rows){const p=(r.pcode||"").trim();if(!p){skip++;continue;}const v=num(String(r.value));if(v==null){skip++;continue;}ok++;payloadRows.push({dataset_id:metaId,admin_pcode:p,value:v,unit:r.unit||unit||null,notes:r.notes||null});}
for(let i=0;i<payloadRows.length;i+=(chunk?800:400)){const slice=payloadRows.slice(i,i+(chunk?800:400));const{error}=await supabase.from("dataset_values").insert(slice);if(error)throw error;}
setBusy(false);setMsg({type:"ok",text:`Upload complete: ${ok} rows${skip?`; ${skip} skipped`:""}`});onCreated?.();}catch(e:any){setBusy(false);setMsg({type:"err",text:e.message});}};
return(<div className={`fixed inset-0 z-50 ${open?"":"pointer-events-none"}`}><div className={`absolute inset-0 bg-black/40 ${open?"opacity-100":"opacity-0"}`}onClick={onClose}/><div className={`absolute left-1/2 top-1/2 w-full max-w-5xl -translate-x-1/2 -translate-y-1/2 rounded-lg bg-white shadow-lg ${open?"opacity-100":"opacity-0"}`}>
<div className="flex justify-between border-b px-5 py-3"><h3 className="text-lg font-semibold text-[color:var(--gsc-gray)]">Add New Dataset</h3><button onClick={onClose}><X className="w-5 h-5"/></button></div>
<div className="p-5 grid grid-cols-1 lg:grid-cols-3 gap-4">
<div className="lg:col-span-2 space-y-3">
<div className="grid md:grid-cols-2 gap-3"><div><label className={LABEL}>Title *</label><input className={FIELD}value={title}onChange={e=>setTitle(e.target.value)}/></div><div><label className={LABEL}>Year</label><input className={FIELD}type="number"value={year}onChange={e=>setYear(e.target.value?Number(e.target.value):"")}/></div></div>
<div><label className={LABEL}>Description</label><textarea className={FIELD}rows={3}value={desc}onChange={e=>setDesc(e.target.value)}/></div>
<div className="grid md:grid-cols-3 gap-3"><div><label className={LABEL}>Admin Level</label><select className={FIELD}value={adminLevel}onChange={e=>setAdmin(e.target.value)}>{levels.map(l=><option key={l}>{l}</option>)}</select></div><div><label className={LABEL}>Dataset Type</label><select className={FIELD}value={datasetType}onChange={e=>setType(e.target.value as any)}><option value="gradient">Gradient</option><option value="categorical"disabled>Categorical (soon)</option></select></div><div><label className={LABEL}>Data Type</label><select className={FIELD}value={dataType}onChange={e=>setData(e.target.value as any)}><option value="numeric">Numeric</option><option value="percentage">Percentage</option></select></div></div>
<div className="grid md:grid-cols-3 gap-3"><div><label className={LABEL}>Unit</label><input className={FIELD}value={unit}onChange={e=>setUnit(e.target.value)}/></div><div><label className={LABEL}>Source Name</label><input className={FIELD}value={srcName}placeholder="e.g. NSO"onChange={e=>setSrc(e.target.value)}/></div><div><label className={LABEL}>Source URL</label><input className={FIELD}value={srcUrl}placeholder="https://…"onChange={e=>setUrl(e.target.value)}/></div></div>
{adminLevel==="ADM0"&&<div className="grid md:grid-cols-2 gap-3"><div><label className={LABEL}>National Value</label><input className={FIELD}placeholder={dataType==="percentage"?"e.g. 12.5%":"e.g. 42"}value={natVal}onChange={e=>setNat(e.target.value)}/></div><div className="flex items-end"><p className="text-xs text-gray-500">For ADM0 provide a national value or upload CSV.</p></div></div>}
<div className="grid md:grid-cols-2 gap-3"><div><label className={LABEL}>CSV File {adminLevel!=="ADM0"?"*":"(optional)"}</label><input ref={useRef(null)}type="file"accept=".csv"className="block w-full text-sm"onChange={e=>setCsv(e.target.files?.[0]||null)}/><p className="text-xs text-gray-500 mt-1">Expected: name(optional),pcode,value(optional:unit,notes).</p></div><div className="flex items-end justify-between"><label className="flex items-center gap-2 text-sm"><input type="checkbox"checked={chunk}onChange={e=>setChunk(e.target.checked)}/>Large CSVs<Info className="w-4 h-4 text-gray-400"/></label><div className="text-xs text-gray-500">{csv?<span>{csv.name}</span>:<span>No file</span>}</div></div></div>
</div>
<div className="space-y-3"><div className="flex items-end gap-2"><div className="flex-1"><label className={LABEL}>Indicators</label><div className="relative"><Search className="w-4 h-4 text-gray-400 absolute left-2 top-2.5"/><input className={`${FIELD} pl-8`}placeholder="Search…"value={search}onChange={e=>setSearch(e.target.value)}/></div></div><div className="w-36"><label className={LABEL}>Theme</label><select className={FIELD}value={theme}onChange={e=>setTheme(e.target.value)}><option>All</option>{themes.map(t=><option key={t.name}>{t.name}</option>)}</select></div></div>
<div className="max-h-[420px] overflow-auto border rounded-md p-2">{fInds.map(i=>{const act=sel?.id===i.id;return(<div key={i.id}className={`${CARD} p-3 mb-2 ${act?"border-[color:var(--gsc-blue)] bg-blue-50/30":"bg-white"}`}onClick={()=>setSel(act?null:i)}><div className="font-medium">{i.name}</div><div className="text-xs text-gray-600 mt-0.5">{i.theme?`${i.theme} • `:""}{i.code} • {i.data_type||"—"}</div></div>);})}{!fInds.length&&<div className="text-sm text-gray-500 py-6 text-center">No indicators.</div>}</div><div className="text-xs text-gray-500 flex items-center gap-1"><AlertTriangle className="w-4 h-4"/>Linking indicator optional.</div></div></div>
<div className="flex justify-between border-t px-5 py-3"><button className={BTN_GHOST}onClick={onClose}>Cancel</button><div className="flex items-center gap-3">{busy&&<span className="text-sm text-gray-600 flex items-center gap-2"><Loader2 className="w-4 h-4 animate-spin"/>Uploading…</span>}<button className={BTN_PRIMARY}onClick={handleCreate}disabled={leftDis}><Upload className="w-4 h-4"/>Upload Dataset</button></div></div>
{msg.type&&<div className={`flex items-center gap-2 text-sm px-5 py-2 border-t ${msg.type==="ok"?"text-green-700":"text-[color:var(--gsc-red)]"}`}>{msg.type==="ok"?<CheckCircle2 className="w-4 h-4"/>:<AlertTriangle className="w-4 h-4"/>}<span>{msg.text}</span></div>}
</div></div>);
}
